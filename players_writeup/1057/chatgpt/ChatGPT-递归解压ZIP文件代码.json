[{"role":"Prompt","say":"写python代码，递归解压zip文件"},{"role":"Response","say":"你可以使用 zipfile 模块来递归解压 ZIP 文件。以下是一个递归解压缩 ZIP 文件的 Python 代码示例，它会解压当前文件夹中的所有 ZIP 文件并递归解压嵌套的 ZIP 文件：python复制代码import os\nimport zipfile\n\ndef unzip_recursive(zip_path, extract_dir):\n    # 创建解压目录（如果不存在）\n    os.makedirs(extract_dir, exist_ok=True)\n    \n    # 打开 zip 文件\n    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n        zip_ref.extractall(extract_dir)  # 解压缩所有文件\n        \n        # 遍历解压后的文件，查找是否有嵌套的 ZIP 文件\n        for file_name in zip_ref.namelist():\n            extracted_path = os.path.join(extract_dir, file_name)\n            \n            # 如果是 ZIP 文件，递归解压\n            if zipfile.is_zipfile(extracted_path):\n                new_extract_dir = os.path.join(extract_dir, file_name.replace('.zip', ''))\n                unzip_recursive(extracted_path, new_extract_dir)\n                os.remove(extracted_path)  # 解压后删除嵌套的 ZIP 文件\n\n# 使用示例\nzip_file_path = 'path/to/your/file.zip'  # 替换为你的 zip 文件路径\noutput_dir = 'path/to/extract'  # 替换为解压目标路径\nunzip_recursive(zip_file_path, output_dir)\n代码说明：unzip_recursive 函数接受两个参数：zip_path 表示 ZIP 文件路径，extract_dir 表示解压到的目录。os.makedirs(extract_dir, exist_ok=True) 确保目标解压目录存在。使用 zipfile.ZipFile 打开 ZIP 文件，并提取其中的所有文件。解压后，检查解压目录中是否存在嵌套的 ZIP 文件，若存在，则递归调用该函数进行解压。解压完嵌套 ZIP 文件后，可以选择删除原 ZIP 文件以节省空间。"}]