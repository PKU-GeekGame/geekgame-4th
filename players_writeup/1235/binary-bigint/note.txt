sub_401150 高精度加法 (a, c, b) c=a+b，返回长度【长度存在 [0] 里】
sub_402320 可能是 memset( a, len, val ).
sub_4016C0 用 a2 这个整型变量初始化高精度 a1
sub_401300 *a1, *a2, a3，高精度 a1 乘低精度 a3，答案在 a2，返回长度
sub_403D50 *a1, a2, *a3，可能是把高精度 a3 的前 a2 位，复制给 a1。但是都是 char 数组？重点是看起来格式跟高精度的 int 数组很相似。
	sub_402010 可能就是类似 memcpy？第一个存到第二个参数
sub_407000 *a, *b, c, d，从 b 这里拷贝[c,d]到 a？注意 char 数组
sub_401770 参数看起来就是高精度数组了。不对，看起来只用 [0], [1] 的值，且 [0] 是高精度，[1] 是 char 数组。作用好像是在 [0] 的高精度数上求出一个一个 *128+ch 的结果。（v3 变量不知道啥用）
sub_401450 看起来是高精度乘法，格式同加法。

sub_401770[0] 用 enc 表示

sub_401850：给了个高精度数 a1, 
(a1*a1+enc(unk_425000))*a1=>v10
a1*a1*enc(unk_425018)+enc(unk_425028)=>v9
return v9 == v10

sub_401090 *a1, *a2 俩高精度数，return a1 >= a2


sub_41F9E0：char 数组成为高精度格式，调用 sub_41F860
sub_41F860：好像是读入，最多 a3 个字符，遇到换行什么的直接停

（char 数组指 byte 数组）


sub_4015C0：*a1, *a2, *a3，a2 = a1 mod a3

sub_401230：高精度减法，同上


主函数 sub_4019B0
flag 1 内：
sub_407000(&v14, &byte_42FED0, 1LL, dword_42FFD0); 看起来是把这玩意前 1/3 存到 v14，虽然是 char 数组，但格式似乎和高精度一样。
v3 看起来存了高精度数组，即指针的指针。*要更正
v3[0]=v15
v3[1]=v14
v15=enc(v14)
要求 sub_401850(v15) == 1
总之分三段，分别这么跑，都通过。


flag 2 内：
把输入(byte_42FED0) enc，拷贝进 dword_432580
跑 16 次：
	v16=dword_432580*dword_432580
	v14=v16%dword_42FFE0（好像是 enc of unk_425048）
	dword_432580=v14
v12=enc(byte_42FED0) 就是 输入的 enc
v14=v12*dword_432580
v12=v14%dword_42FFE0
dword_432580=v12 // this is enc(input)^65537 % enc(unk_425048)
要求 dword_432580==dword_4312B0（好像是 enc of unk_4250E0）