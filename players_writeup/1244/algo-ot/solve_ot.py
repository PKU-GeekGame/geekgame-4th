n = 22577918671753140068692375130943862041926837912692103247843634653542821305989200037139304646139388756117464271375708036535663272487008806158287137821897901269692891920753838098443665933130009490463467506739370564336707622929356585045668572699006826246628413996143826647439187786818409762140370471027135896520373485567909988754815139723210220946096679831414765482931086187841137957001916769242859047150933548946518066277981816440513431827170142772951204944292360527080434606039063109353566195243470039001514440593243163811163951883839044834225281761402698260291260994622666450011217834092215342484705249121153638320719
e = 65537
x0 = 18669663539455333526767025766751041672983192028478142988470444265402002275383619696668343837951552342983442543576579875072870445993926981106092218837926463348409917405684449952230446304448848102948615757009668620916426856497358628198597758822070714237503760925877794655114936938665712257151005011552467097862903182047486642804032939092990883368168647034546063661670542075951698749035899731129333184583926961563815674411965935464585449444810401444187100778720587486999492822342158938927442357234315364835212867548201960658034716681107024116356844956934965999348699509298693216206605773140708979898106664892658669832990
x1 = 21020901084150232856355756580829623911271745528875541685723934776467862400397207715866453951207964252085775026822254576146302232820625333535635856230495867620701372106857613003867842345172375946436291962988609611031795177031799806958099252580901107678552277188707095496010263347286040098427091776200723477500121621695876927009525446299783161013423617316777244056836439530574785284438781624960793997590888437969535202363919142932815477836383521756792248708250712152854440889959767650811369392407077165782067468311530517151234095460374379184382757818220752700233199312966581261548568536834906261141203245202650383054844
v = 21020901084150232856355756580829623911271745528875541685723934776467862400397207715866453951207964252085775026822254576146302232820625333535635856230495867620701372106857613003867842345172375946436291962988609611031795177031799806958099252580901107678552277188707095496010263347286040098427091776200723477500121621695876927009525446299783161013423617316777244056836439530574785284438781624960793997590888437969535202363919142932815477836383521756792248708250712152854440889959767650811369392407077165782067468311530517151234095460374379184382757818220752700233199312966581261548568536834906261141203245202650383054844
v0 = 15201898062450480503535083426103795879065862960512919369906887180730801963712687920663171456266093864991719275959645330153005604813115315900429123794474057357553159596625936795860196598254077577958415749338117339950079575478621014165568479137922803124050007992759826131380089220951379547963740828492955709703067544780078751057709860531770412983052867444498284236770567076034386299359162648573517197097521074032393833268270194210755550645626618084219459369767168680434855231139008880790581928746781096067630635864928401277840162288670430574402473559072064074823602143190645861805567041282884136881152529183616797977359
v1 = 1886018382400497954607143522518713761231221990543573951873897699083826268437795024863535298429070830108709083285625108457174516179557136788224247899335714886723959921575202748266286250432670653128833691315579601823099076456473549134785769272339230618324088571196528911560981945989525600586423310218560345907801114934967696020585566443809582240999007342686929958395524731476404054582338622902922117860822734103299938167696911998724633861580765541325438700820155918494081130884437451135819795191241597387231075267144605344001782277302885359949253730931192261578429043507747623727618343125231380866596607079963727423475

def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

gcd_1 = (pow(v0 - v1, e, n) + x0 - x1 + n) % n
q = gcd(gcd_1, n)
assert gcd_1 != 0
assert n % q == 0
p = n // q
phi = (p - 1) * (q - 1)
d = pow(e, -1, phi)
f = ((v0 - pow(v-x0, d, n) - pow(p+q, d, n)) % n + n) % n
bts = f.to_bytes((f.bit_length() + 7) // 8, 'big')
print(bts[:bts.find(b"}\x0a") + 1].decode())
