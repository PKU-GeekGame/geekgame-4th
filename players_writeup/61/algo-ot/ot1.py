from Crypto.Util.number import long_to_bytes
import math

modN = 15488870963741226270934183959774903254044165583809154954985308483158437567526998376740415655905413278936056303193321818750801899847161704632494714328743605419392573400752761417582605681081560436600698373432728123892734661029188405242053053577656416113913914034994255996716279288568672167103542591214464934570146890594561661827004839803070755283758311035920269318401393318665499362609683749822346596068186706141152160696583380920396857312565497960144146372817815200120800664947998091510690105953802487871454801823890089811724216715311626642223574995436225683937435099224756839882614488871831977047194733273889650147909

e = 65537

x0 = 4208774531298618987029173400577115395075610206256899047973007726128810025478827087875724660468500779253687806291309890148734348787906976559058926284906849731119312328971021441542492091395832043755329576049987815467983060785172689720697790941885099191618154130034040280850994673509251564839523204350868257449848143442771703747744372157772747198845876751658485857131919407425791812913426450689885859273012253971706364983330736354326810573572526041588863321217209123260587348553481211694526206837815126147400597878880617980565539358791138857018369803587600803559595182253696928830894423019959924128851798429245736688467

x1 = 6517627418904769975865660292141265507383034833459354778806109896432228398172162836346404730640732975795551603564814431095848294549327825224915652374338393142509933717072863045337335217301547593136972824164858551941026251274520815557099113736702247534742847587439226285553971154103458726649987091458088634027207173154585857571734227978099544409633412057533912144361430112667230971304284380372581349257726500908725913141908354226029263812846259426239345600265719108189248187128452150661126036294348782683940395365694617368249471442454186223982371531389248173752784276187651858301572078993917924526527383297546832446896

v0 = 4390219178145392020484618407593898092789184798520372042995676581931715336501007132094237357178379601809617469158371328464127435231346282995937842240221586296769741828197713364386546330257502464308261170472651505319360171605158981822740646307584038418329745232894940285568409305832495344998761339148691338468964128885644797990035826622895419269743501354216685490243413900547284605268406626998116731207998381356400803530372759969894022636068702262774394276439908814539263667744668908921353700257352276839631578141260371327878724409145011179519458054019759127679098739237187325777498049317707162119928799465428918010055

v1 = 12820144709259196594380568477806757283860928857703346391563082972354482223086826019200463634818075651270716839000741142624412152671561991520339505468161414461716953615469866762170681950841561680804307060898635175247394349391198059502158661277623601794432159460746085457613506600559138058448138165772043471671589236964129826564738180166149630713743576217948502294153750867947259084572492035212105116701451219570832512877411869221599484807601810581601861247401431722989044335053521041023472410227128800938918405242541050387575213266436624294772602033347508353202240684289719540476626441796523722632245182672253103390998

A = (v0 + v1) * pow(2, -1, modN) % modN
B = (v0 - v1) * pow(2, -1, modN) % modN
C = (x1 - x0) * pow(2, -1, modN) % modN

# A = p^d + f
# B = C^d + q^d

# B = C^d (mod q)
# B^e = C (mod q)

q = math.gcd(modN, pow(B, e, modN) - C)
p = modN // q

assert(p * q == modN)
phi = (p - 1) * (q - 1)
d = pow(e, -1, phi)

f = (A - pow(p, d, modN)) % modN
print(long_to_bytes(f))